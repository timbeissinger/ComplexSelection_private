#print(i)
tmp <- as.numeric(unlist(strsplit(geno[i,2],split="")))
tmp[which(tmp == 0)] <- -1
tmp[which(tmp == 3 | tmp ==4)] <- 0
tmp[which(tmp==2)] <- 1
gen[,i] <- tmp
}
rm(list=ls())
directory="r_qtl_100"
pheno <- read.table(paste(directory, "/Line 1_data_001.txt",sep=""),header=T,stringsAsFactors=F)
map <- read.table(paste(directory, "/lm_mrk_001.txt",sep=""),header=T,stringsAsFactors=F)
geno <- read.table(paste(directory, "/Line 1_mrk_001_head.txt",sep=""),header=F,stringsAsFactors=F,skip=1,sep="", colClasses=c("numeric","character")) # read genos as characters
qtlMap <- read.table(paste(directory, "/lm_qtl_001.txt",sep=""),header=T,stringsAsFactors=F)
gen <- matrix(NA,nrow=nrow(map),ncol=nrow(geno))
gen <- as.data.frame(gen)
names(gen) <- geno[,1]
for(i in 1:1000){
#print(i)
tmp <- as.numeric(unlist(strsplit(geno[i,2],split="")))
tmp[which(tmp == 0)] <- -1
tmp[which(tmp == 3 | tmp ==4)] <- 0
tmp[which(tmp==2)] <- 1
gen[,i] <- tmp
}
gen<-t(gen)
#geno2 <- cbind(as.numeric(rownames(gen)),gen) #gapit genotype file
gc()
colnames(gen) <- c(map$ID)
library(rrBLUP)
phen <- as.matrix(pheno[,10:13]) # phenos must be a matrix
train <- sample(1000,600)
test <- setdiff(1:1000,train)
Pheno_train <- phen[train,4] ###
m_train <- gen[train,]
Pheno_valid <- phen[test,4] ###
m_valid <- gen[test,]
answer <- mixed.solve(Pheno_train, Z=m_train, K=NULL, SE=F, return.Hinv=FALSE, method="ML")
effects <- answer$u
effects.mat = as.matrix(effects)
# validate
pred_phen_valid <- m_valid %*% effects.mat
predicted_valid <- (pred_phen_valid[,1] + answer$beta)
#predicted_valid
plot(Pheno_valid,predicted_valid)
cor(Pheno_valid,predicted_valid)
pred_phen_train = m_train %*% effects.mat
predicted_train = pred_phen_train[,1] +answer$beta
cor(Pheno_train, predicted_train)
plot(Pheno_train, predicted_train)
```
freqs0<-read.table(paste(directory, "/Line 1_freq_mrk_001.txt",sep=""),header=T,nrows=length(effects),fill=T,stringsAsFactors=F)
names(freqs0)[4]<- "Allele1"
names(freqs0)[5]<- "Allele2"
freqs0$Allele2[which(substr(freqs0$Allele1,1,1)==2)] <- "2:1.00000" # put this in the spot for the second allele
freqs0$Allele1[which(substr(freqs0$Allele1,1,1)==2)] <- "1:0.00000"
freqs0$Allele1 <- as.numeric(substr(freqs0$Allele1,3,1000))
freqs0$Allele2 <- as.numeric(substr(freqs0$Allele2,3,1000))
freqs20<-read.table(paste(directory, "/Line 1_freq_mrk_001.txt",sep=""),header=F,skip={4*length(effects)+1},fill=T,stringsAsFactors=F)
names(freqs20)[4]<- "Allele1"
names(freqs20)[5]<- "Allele2"
freqs20$Allele2[which(substr(freqs20$Allele1,1,1)==2)] <- "2:1.00000" # put this in the spot for the second allele
freqs20$Allele1[which(substr(freqs20$Allele1,1,1)==2)] <- "1:0.00000"
freqs20$Allele1 <- as.numeric(substr(freqs20$Allele1,3,1000))
freqs20$Allele2 <- as.numeric(substr(freqs20$Allele2,3,1000))
change1<-freqs20$Allele1-freqs0$Allele1
change2<-freqs20$Allele2-freqs0$Allele2
plot(change2,effects)
cor.test(change2, effects,use="pairwise.complete.obs")
plot(change2,effects)
cor.test(change2, effects,use="pairwise.complete.obs")
Qstat <- change2 * effects
Qstat_corrected <- abs(change2 * effects)/(freqs0$Allele2*(1-freqs0$Allele2))
Qstat_genome <- sum(change2*effects, na.rm=T)
Qstat_genome
# Now do the permutation test
Qstat_perm_high<-c()
Qstat_perm_low<-c()
Qstat_corrected_perm_high <- c()
Qstat_genome_shuffled <- c()
for(i in 1:1000){
#print(i)
change2_index <- sample(length(change2),length(change2),replace=F)
change2_shuffle <- change2[change2_index]
freqs0_Allele2_shuffle <- freqs0$Allele2[change2_index]
effects_shuffle <- sample(effects,length(effects),replace=F)
Qstat_shuffle <- change2_shuffle*effects_shuffle
Qstat_corrected_shuffle <- abs(change2_shuffle*effects_shuffle)/(freqs0_Allele2_shuffle *(1-freqs0_Allele2_shuffle))
Qstat_perm_high[i] <- quantile(Qstat_shuffle,0.99999,na.rm=T)
Qstat_perm_low[i] <- quantile(Qstat_shuffle,0.00001,na.rm=T)
Qstat_corrected_perm_high[i] <- quantile(Qstat_corrected_shuffle,0.99999,na.rm=T)
Qstat_genome_shuffled[i] <- sum(Qstat_shuffle,na.rm=T)
}
Qstat_upper <- quantile(Qstat_perm_high,0.975)
Qstat_lower <- quantile(Qstat_perm_low,0.025)
Qstat_corrected_upper <- quantile(Qstat_corrected_perm_high,0.975)
for(i in 1:10){
start<-i*10000-9999
end<-i*10000
par(mfrow=c(2,1))
plot(map$Position[start:end],Qstat[start:end],ylab="Qstat", xlab="cM",main=paste("chromosome", i),ylim=c(min(Qstat,Qstat_lower,na.rm=T),max(Qstat,Qstat_upper,na.rm=T)))
abline(v=qtlMap$Position[1:10])
abline(h=c(Qstat_upper,Qstat_lower),col="red")
plot(map$Position[start:end],Qstat_corrected[start:end],ylab="Qtat_corrected",xlab="cM",main=paste("chromosome", i),ylim=c(0,max(Qstat_corrected,Qstat_corrected_upper,na.rm=T)))
abline(v=qtlMap$Position[1:10])
abline(h=Qstat_corrected_upper,col="red")
}
#Overall data
hist(Qstat_genome_shuffled,xlim=c(min(Qstat_genome,Qstat_genome_shuffled,na.rm=T),max(Qstat_genome,Qstat_genome_shuffled,na.rm=T)))
abline(v=Qstat_genome)
length(which(Qstat>=Qstat_upper | Qstat <= Qstat_lower)) # Number Qstat outliers
length(which(Qstat_corrected>=Qstat_corrected_upper)) # Number Qstat_corrected outliers
length(which(abs(Qstat_genome_shuffled) >= abs(Qstat_genome))) / length(Qstat_genome_shuffled) # Qstat_genome p-value
png("mapping.png",height=14,width=16,,units="in",res=200,pointsize=18)
par(mfrow=c(5,2),mar=c(4,3,3,1))
for(i in 1:10){
start<-i*10000-9999
end<-i*10000
plot(map$Position[start:end],Qstat[start:end], xlab="cM",main=paste("Chromosome", i),ylim=1.2*c(min(Qstat,Qstat_lower,na.rm=T),max(Qstat,Qstat_upper,na.rm=T)),col="#848B9B",pch=19,ylab=paste(expression(Delta)," X ", expression(alpha),sep=""),cex.lab=1.5,cex.main=1.5,mgp=c(1.7,1,0))
abline(v=qtlMap$Position[1:10],col="#25282E")
abline(h=c(Qstat_upper,Qstat_lower),col="red",lwd=2)
}
dev.off()
plot(map$Position[start:end],Qstat[start:end], xlab="cM",main=paste("Chromosome", i),ylim=1.2*c(min(Qstat,Qstat_lower,na.rm=T),max(Qstat,Qstat_upper,na.rm=T)),col="#848B9B",pch=19,ylab=expression(Delta," X ",alpha),cex.lab=1.5,cex.main=1.5,mgp=c(1.7,1,0))
plot(map$Position[start:end],Qstat[start:end], xlab="cM",main=paste("Chromosome", i),ylim=1.2*c(min(Qstat,Qstat_lower,na.rm=T),max(Qstat,Qstat_upper,na.rm=T)),col="#848B9B",pch=19,ylab=expression(Delta X alpha),cex.lab=1.5,cex.main=1.5,mgp=c(1.7,1,0))
plot(map$Position[start:end],Qstat[start:end], xlab="cM",main=paste("Chromosome", i),ylim=1.2*c(min(Qstat,Qstat_lower,na.rm=T),max(Qstat,Qstat_upper,na.rm=T)),col="#848B9B",pch=19,ylab=expression(Delta* alpha),cex.lab=1.5,cex.main=1.5,mgp=c(1.7,1,0))
png("mapping.png",height=14,width=16,,units="in",res=200,pointsize=18)
par(mfrow=c(5,2),mar=c(4,3,3,1))
for(i in 1:10){
start<-i*10000-9999
end<-i*10000
plot(map$Position[start:end],Qstat[start:end], xlab="cM",main=paste("Chromosome", i),ylim=1.2*c(min(Qstat,Qstat_lower,na.rm=T),max(Qstat,Qstat_upper,na.rm=T)),col="#848B9B",pch=19,ylab=expression(Delta* alpha),cex.lab=1.5,cex.main=1.5,mgp=c(1.7,1,0))
abline(v=qtlMap$Position[1:10],col="#25282E")
abline(h=c(Qstat_upper,Qstat_lower),col="red",lwd=2)
}
dev.off()
plot(effects,change2,pch=19,xlab="Effect size", ylab="Frequency change",col="#25282E",cex.lab=2,mgp=c(2.5,1,0))
abline(lm(effects~change2))
par(mfrow=c(1,1))
cor(effects,change2)
cor(effects,change2,na,rm=T)
effects
change2
lm(effects~change2)
plot(effects,change2,pch=19,xlab="Effect size", ylab="Frequency change",col="#25282E",cex.lab=2,mgp=c(2.5,1,0))
abline(lm(change2~effects))
abline(lm(change2~effects),col="#25282E")
abline(lm(change2~effects),col="#25282E",lwd=3)
abline(lm(change2~effects),col="#848B9B",lwd=3)
abline(lm(change2~effects),col="#848B9B",lwd=6)
jpeg("correlations_and_test_100.jpg",height=20,width=12,units="in",res=200,pointsize=18)
par(mfrow=c(2,1),mar=c(5,4,4,2))
plot(effects,change2,pch=19,xlab="Effect size", ylab="Frequency change",col="#25282E",cex.lab=2,mgp=c(2.5,1,0))
abline(lm(change2~effects),col="#848B9B",lwd=6)
text(-9e-09,.38,paste("correlation =", round(cor(effects,change2,use="pairwise.complete.obs"),2)),cex=1.4)
hist(Qstat_genome_shuffled,xlim=c(min(-1.2*Qstat_genome,Qstat_genome_shuffled,na.rm=T),1.25*max(Qstat_genome,Qstat_genome_shuffled,na.rm=T)),col="#848B9B",main="",cex.lab=2,mgp=c(2.5,1,0),xlab=expression(Delta[alpha]))
abline(v=Qstat_genome,col="#25282E",lwd=6)
legend("topleft","c(x,y)",c("permuted null distribution","Observed"),col=c("#848B9B","#25282E"),pch=c(15,NA),lwd=c(NA,6),pt.cex=2, bg="white",cex=1.2)
dev.off()
rlm(list=ls())
rm(list=ls())
###########################################################
### In this script I will generate figures for my ICQG5 ###
### poster. Use simulated 200 QTL to start.             ###
###########################################################
### Timothy M Beissinger
### 6/7/2016
### Load simulation data
directory="r_qtl_100_rnd"
pheno <- read.table(paste(directory, "/Line 1_data_001.txt",sep=""),header=T,stringsAsFactors=F)
map <- read.table(paste(directory, "/lm_mrk_001.txt",sep=""),header=T,stringsAsFactors=F)
geno <- read.table(paste(directory, "/Line 1_mrk_001_head.txt",sep=""),header=F,stringsAsFactors=F,skip=1,sep="", colClasses=c("numeric","character")) # read genos as characters
qtlMap <- read.table(paste(directory, "/lm_qtl_001.txt",sep=""),header=T,stringsAsFactors=F)
### Manipulate simulation data
gen <- matrix(NA,nrow=nrow(map),ncol=nrow(geno))
gen <- as.data.frame(gen)
names(gen) <- geno[,1]
for(i in 1:1000){
#print(i)
tmp <- as.numeric(unlist(strsplit(geno[i,2],split="")))
tmp[which(tmp == 0)] <- -1
tmp[which(tmp == 3 | tmp ==4)] <- 0
tmp[which(tmp==2)] <- 1
gen[,i] <- tmp
}
gen<-t(gen)
#geno2 <- cbind(as.numeric(rownames(gen)),gen) #gapit genotype file
#rm(gen) # free up memory
#rm(geno)
gc()
#### rr-BLUP
library(rrBLUP)
phen <- as.matrix(pheno[,10:13])
train <- sample(1000,600)
test <- setdiff(1:1000,train)
Pheno_train <- phen[train,4] ###
m_train <- gen[train,]
Pheno_valid <- phen[test,4] ###
m_valid <- gen[test,]
answer <- mixed.solve(Pheno_train, Z=m_train, K=NULL, SE=F, return.Hinv=FALSE, method="ML")
effects <- answer$u
effects.mat = as.matrix(effects)
# validate
pred_phen_valid <- m_valid %*% effects.mat
predicted_valid <- (pred_phen_valid[,1] + answer$beta)
#predicted_valid
plot(Pheno_valid,predicted_valid)
cor(Pheno_valid,predicted_valid)
#is the model overfit?
pred_phen_train = m_train %*% effects.mat
predicted_train = pred_phen_train[,1] +answer$beta
cor(Pheno_train, predicted_train)
plot(Pheno_train, predicted_train)
### Calculate allele frequencies
freqs0<-read.table(paste(directory, "/Line 1_freq_mrk_001.txt",sep=""),header=T,nrows=length(effects),fill=T,stringsAsFactors=F)
names(freqs0)[4]<- "Allele1"
names(freqs0)[5]<- "Allele2"
freqs0$Allele2[which(substr(freqs0$Allele1,1,1)==2)] <- "2:1.00000" # put this in the spot for the second allele
freqs0$Allele1[which(substr(freqs0$Allele1,1,1)==2)] <- "1:0.00000"
freqs0$Allele1 <- as.numeric(substr(freqs0$Allele1,3,1000))
freqs0$Allele2 <- as.numeric(substr(freqs0$Allele2,3,1000))
freqs20<-read.table(paste(directory, "/Line 1_freq_mrk_001.txt",sep=""),header=F,skip={4*length(effects)+1},fill=T,stringsAsFactors=F)
names(freqs20)[4]<- "Allele1"
names(freqs20)[5]<- "Allele2"
freqs20$Allele2[which(substr(freqs20$Allele1,1,1)==2)] <- "2:1.00000" # put this in the spot for the second allele
freqs20$Allele1[which(substr(freqs20$Allele1,1,1)==2)] <- "1:0.00000"
freqs20$Allele1 <- as.numeric(substr(freqs20$Allele1,3,1000))
freqs20$Allele2 <- as.numeric(substr(freqs20$Allele2,3,1000))
#### Now start with analysis.
### Plot correlation of change and effect size
change1<-freqs20$Allele1-freqs0$Allele1
change2<-freqs20$Allele2-freqs0$Allele2
plot(change2,effects)
cor.test(change2, effects,use="pairwise.complete.obs")
#########################
### PERMUTATION TEST ####
#########################
# First, compute three statistics of interest
Qstat <- change2 * effects
Qstat_corrected <- abs(change2 * effects)/(freqs0$Allele2*(1-freqs0$Allele2))
Qstat_genome <- sum(change2*effects, na.rm=T)
Qstat_genome
# Now do the permutation test
Qstat_perm_high<-c()
Qstat_perm_low<-c()
Qstat_corrected_perm_high <- c()
Qstat_genome_shuffled <- c()
for(i in 1:1000){
#print(i)
change2_index <- sample(length(change2),length(change2),replace=F)
change2_shuffle <- change2[change2_index]
freqs0_Allele2_shuffle <- freqs0$Allele2[change2_index]
effects_shuffle <- sample(effects,length(effects),replace=F)
Qstat_shuffle <- change2_shuffle*effects_shuffle
Qstat_corrected_shuffle <- abs(change2_shuffle*effects_shuffle)/(freqs0_Allele2_shuffle *(1-freqs0_Allele2_shuffle))
Qstat_perm_high[i] <- quantile(Qstat_shuffle,0.99999,na.rm=T)
Qstat_perm_low[i] <- quantile(Qstat_shuffle,0.00001,na.rm=T)
Qstat_corrected_perm_high[i] <- quantile(Qstat_corrected_shuffle,0.99999,na.rm=T)
Qstat_genome_shuffled[i] <- sum(Qstat_shuffle,na.rm=T)
}
Qstat_upper <- quantile(Qstat_perm_high,0.975)
Qstat_lower <- quantile(Qstat_perm_low,0.025)
Qstat_corrected_upper <- quantile(Qstat_corrected_perm_high,0.975)
#Overall data
hist(Qstat_genome_shuffled,xlim=c(min(Qstat_genome,Qstat_genome_shuffled,na.rm=T),max(Qstat_genome,Qstat_genome_shuffled,na.rm=T)))
abline(v=Qstat_genome)
length(which(Qstat>=Qstat_upper | Qstat <= Qstat_lower)) # Number Qstat outliers
#################################################################
######## Plot correlation and test for selection data ###########
#################################################################
jpeg("correlations_and_test_100_rnd.jpg",height=20,width=12,units="in",res=200,pointsize=18)
par(mfrow=c(2,1),mar=c(5,4,4,2))
plot(effects,change2,pch=19,xlab="Effect size", ylab="Frequency change",col="#25282E",cex.lab=2,mgp=c(2.5,1,0))
abline(lm(change2~effects),col="#848B9B",lwd=6)
text(-9e-09,.38,paste("correlation =", round(cor(effects,change2,use="pairwise.complete.obs"),2)),cex=1.4)
hist(Qstat_genome_shuffled,xlim=c(min(-1.2*Qstat_genome,Qstat_genome_shuffled,na.rm=T),1.25*max(Qstat_genome,Qstat_genome_shuffled,na.rm=T)),col="#848B9B",main="",cex.lab=2,mgp=c(2.5,1,0),xlab=expression(Delta[alpha]))
abline(v=Qstat_genome,col="#25282E",lwd=6)
legend("topleft","c(x,y)",c("permuted null distribution","Observed"),col=c("#848B9B","#25282E"),pch=c(15,NA),lwd=c(NA,6),pt.cex=2, bg="white",cex=1.2)
dev.off()
##########################################################
######## Plot cumulative sum of alhpa, delta   ###########
##########################################################
cum<-c(change2[1]*effects[1])
for(i in 2:length(effects)){
cum[i] <- change2[i]*effects[i] + cum[i-1]
}
plot(cum)
q()
###########################################################
### In this script I will generate figures for my ICQG5 ###
### poster. Use simulated 200 QTL to start.             ###
###########################################################
### Timothy M Beissinger
### 6/7/2016
### Load simulation data
directory="r_qtl_200"
pheno <- read.table(paste(directory, "/Line 1_data_001.txt",sep=""),header=T,stringsAsFactors=F)
map <- read.table(paste(directory, "/lm_mrk_001.txt",sep=""),header=T,stringsAsFactors=F)
geno <- read.table(paste(directory, "/Line 1_mrk_001_head.txt",sep=""),header=F,stringsAsFactors=F,skip=1,sep="", colClasses=c("numeric","character")) # read genos as characters
qtlMap <- read.table(paste(directory, "/lm_qtl_001.txt",sep=""),header=T,stringsAsFactors=F)
### Manipulate simulation data
gen <- matrix(NA,nrow=nrow(map),ncol=nrow(geno))
gen <- as.data.frame(gen)
names(gen) <- geno[,1]
for(i in 1:1000){
#print(i)
tmp <- as.numeric(unlist(strsplit(geno[i,2],split="")))
tmp[which(tmp == 0)] <- -1
tmp[which(tmp == 3 | tmp ==4)] <- 0
tmp[which(tmp==2)] <- 1
gen[,i] <- tmp
}
gen<-t(gen)
#geno2 <- cbind(as.numeric(rownames(gen)),gen) #gapit genotype file
#rm(gen) # free up memory
#rm(geno)
gc()
#### rr-BLUP
library(rrBLUP)
phen <- as.matrix(pheno[,10:13])
train <- sample(1000,600)
test <- setdiff(1:1000,train)
Pheno_train <- phen[train,4] ###
m_train <- gen[train,]
Pheno_valid <- phen[test,4] ###
m_valid <- gen[test,]
answer <- mixed.solve(Pheno_train, Z=m_train, K=NULL, SE=F, return.Hinv=FALSE, method="ML")
effects <- answer$u
effects.mat = as.matrix(effects)
# validate
pred_phen_valid <- m_valid %*% effects.mat
predicted_valid <- (pred_phen_valid[,1] + answer$beta)
#predicted_valid
plot(Pheno_valid,predicted_valid)
cor(Pheno_valid,predicted_valid)
#is the model overfit?
pred_phen_train = m_train %*% effects.mat
predicted_train = pred_phen_train[,1] +answer$beta
cor(Pheno_train, predicted_train)
plot(Pheno_train, predicted_train)
### Calculate allele frequencies
freqs0<-read.table(paste(directory, "/Line 1_freq_mrk_001.txt",sep=""),header=T,nrows=length(effects),fill=T,stringsAsFactors=F)
names(freqs0)[4]<- "Allele1"
names(freqs0)[5]<- "Allele2"
freqs0$Allele2[which(substr(freqs0$Allele1,1,1)==2)] <- "2:1.00000" # put this in the spot for the second allele
freqs0$Allele1[which(substr(freqs0$Allele1,1,1)==2)] <- "1:0.00000"
freqs0$Allele1 <- as.numeric(substr(freqs0$Allele1,3,1000))
freqs0$Allele2 <- as.numeric(substr(freqs0$Allele2,3,1000))
freqs20<-read.table(paste(directory, "/Line 1_freq_mrk_001.txt",sep=""),header=F,skip={4*length(effects)+1},fill=T,stringsAsFactors=F)
names(freqs20)[4]<- "Allele1"
names(freqs20)[5]<- "Allele2"
freqs20$Allele2[which(substr(freqs20$Allele1,1,1)==2)] <- "2:1.00000" # put this in the spot for the second allele
freqs20$Allele1[which(substr(freqs20$Allele1,1,1)==2)] <- "1:0.00000"
freqs20$Allele1 <- as.numeric(substr(freqs20$Allele1,3,1000))
freqs20$Allele2 <- as.numeric(substr(freqs20$Allele2,3,1000))
#### Now start with analysis.
### Plot correlation of change and effect size
change1<-freqs20$Allele1-freqs0$Allele1
change2<-freqs20$Allele2-freqs0$Allele2
plot(change2,effects)
cor.test(change2, effects,use="pairwise.complete.obs")
#########################
### PERMUTATION TEST ####
#########################
# First, compute three statistics of interest
Qstat <- change2 * effects
Qstat_corrected <- abs(change2 * effects)/(freqs0$Allele2*(1-freqs0$Allele2))
Qstat_genome <- sum(change2*effects, na.rm=T)
Qstat_genome
# Now do the permutation test
Qstat_perm_high<-c()
Qstat_perm_low<-c()
Qstat_corrected_perm_high <- c()
Qstat_genome_shuffled <- c()
for(i in 1:1000){
#print(i)
change2_index <- sample(length(change2),length(change2),replace=F)
change2_shuffle <- change2[change2_index]
freqs0_Allele2_shuffle <- freqs0$Allele2[change2_index]
effects_shuffle <- sample(effects,length(effects),replace=F)
Qstat_shuffle <- change2_shuffle*effects_shuffle
Qstat_corrected_shuffle <- abs(change2_shuffle*effects_shuffle)/(freqs0_Allele2_shuffle *(1-freqs0_Allele2_shuffle))
Qstat_perm_high[i] <- quantile(Qstat_shuffle,0.99999,na.rm=T)
Qstat_perm_low[i] <- quantile(Qstat_shuffle,0.00001,na.rm=T)
Qstat_corrected_perm_high[i] <- quantile(Qstat_corrected_shuffle,0.99999,na.rm=T)
Qstat_genome_shuffled[i] <- sum(Qstat_shuffle,na.rm=T)
}
Qstat_upper <- quantile(Qstat_perm_high,0.975)
Qstat_lower <- quantile(Qstat_perm_low,0.025)
Qstat_corrected_upper <- quantile(Qstat_corrected_perm_high,0.975)
#Overall data
hist(Qstat_genome_shuffled,xlim=c(min(Qstat_genome,Qstat_genome_shuffled,na.rm=T),max(Qstat_genome,Qstat_genome_shuffled,na.rm=T)))
abline(v=Qstat_genome)
length(which(Qstat>=Qstat_upper | Qstat <= Qstat_lower)) # Number Qstat outliers
##########################################################
######## Plot correlation between alpha, delta ###########
##########################################################
jpeg("correlations_200.jpg",height=8,width=12,units="in",res=200,pointsize=18)
plot(effects,change2,pch=19,xlab="Effect size", ylab="Frequency change",col="#25282E")
abline(lm(change2~effects),col="#848B9B",lwd=6)
text(-1.5e-08,.5,paste("correlation =", round(cor(effects,change2,use="pairwise.complete.obs"),2)))
dev.off()
##########################################################
######## Plot cumulative sum of alhpa, delta   ###########
##########################################################
cum<-c(change2[1]*effects[1])
for(i in 2:length(effects)){
cum[i] <- change2[i]*effects[i] + cum[i-1]
}
plot(cum)
rm(list=ls())
setwd("../Chickens/")
---
title: "WQS Test of Selection"
author: "Timothy M. Beissinger"
date: "June 9, 2015"
output: html_document
---
Chicken data from Jochen and Henner will be used to test the hypothesis that selection has operated on quantitative traits in chickens. To do this, allelic effects estimates and allele frequency change over time were computed by Jochen. The sum of frequency change multiplied by effect size will be computed. If effects and frequency changes are related, this sum should be non-zero and in the direction that the trait was selected. A permutation test will be conducted to test for significance.
### Data loading and prep
```{r}
### genos
rawData <- readRDS("manhattanBrownWhiteAllPhenotypes_20160607.RDS")
```
Split raw data into white and brown lists
```{r}
white <- rawData$whiteLayers
brown<-rawData$brownLayers
```
Now compute the sum of frequency*change
```{r}
result<-matrix(NA,nrow=2,ncol=length(white))
colnames(result)<-names(white)
rownames(result)<-c("white","brown")
for(i in 1:length(white)){
result[1,i]<-sum(white[[i]]$alpha * white[[i]]$deltaP)
result[2,i]<-sum(brown[[i]]$alpha * brown[[i]]$deltaP)
}
```
Now do a permutation test.
```{r}
permuted <- array(NA,dim=c(2,12,1000))
for(j in 1:12){ # trait
for(k in 1:1000){ #permutation
print(j); print(k)
boot <- sample(white[[j]]$deltaP,nrow(white[[j]]),replace=T)
permuted[1,j,k]<-sum(boot*white[[j]]$alpha)
boot <- sample(brown[[j]]$deltaP,nrow(brown[[j]]),replace=T)
permuted[2,j,k]<-sum(boot*brown[[j]]$alpha)
}
}
```
### Results
Plots below show the distribution of null tests compared to the observed value.
```{r,echo=FALSE}
traits=c("Fracture Strength","Fracture Strength","Crack","Egg Weight","Egg Weight","Form","Feed","Body Weight","Egg White","Laying Rate","Laying Rate","Laying Rate")
pdf("WhiteTests.pdf",height=14,width=17,pointsize=18)
par(mfrow=c(4,2),mar=c(5,4,4,2))
par(mfrow=c(4,2))
for(i in c(2,3,5,6,7,8,9,10)){ #whites
hist(permuted[1,i,],xlim=c(min(permuted[1,i,],result[1,i]),max(permuted[1,i,],result[1,i])),main=traits[i],col="#848B9B",cex.main=2,cex.lab=2,ylab="",xlab=expression(Delta[alpha]))
abline(v=result[1,i],col="#25282E",lwd=6)
}
dev.off()
pdf("BrownTests.pdf",height=14,width=17,pointsize=18)
par(mfrow=c(4,2),mar=c(5,4,4,2))
par(mfrow=c(4,2))
for(i in c(2,3,5,6,7,8,9,10)){ #browns
hist(permuted[2,i,],xlim=c(min(permuted[2,i,],result[2,i]),max(permuted[2,i,],result[2,i])),main=traits[i],col="#848B9B",cex.main=2,cex.lab=2,ylab="",xlab=expression(Delta[alpha]))
abline(v=result[2,i],col="#25282E",lwd=6)
}
dev.off()
```
rawData <- readRDS("manhattanBrownWhiteAllPhenotypes_20160607.RDS")
rawData <- readRDS("manhattanBrownWhiteAllPhenotypes_20160607.RDS")
getwd()
rawData <- readRDS("manhattanBrownWhiteAllPhenotypes_20160607.RDS")
white <- rawData$whiteLayers
brown<-rawData$brownLayers
result<-matrix(NA,nrow=2,ncol=length(white))
colnames(result)<-names(white)
rownames(result)<-c("white","brown")
for(i in 1:length(white)){
result[1,i]<-sum(white[[i]]$alpha * white[[i]]$deltaP)
result[2,i]<-sum(brown[[i]]$alpha * brown[[i]]$deltaP)
}
permuted <- array(NA,dim=c(2,12,1000))
for(j in 1:12){ # trait
for(k in 1:1000){ #permutation
print(j); print(k)
boot <- sample(white[[j]]$deltaP,nrow(white[[j]]),replace=T)
permuted[1,j,k]<-sum(boot*white[[j]]$alpha)
boot <- sample(brown[[j]]$deltaP,nrow(brown[[j]]),replace=T)
permuted[2,j,k]<-sum(boot*brown[[j]]$alpha)
}
}
traits=c("Fracture Strength","Fracture Strength","Crack","Egg Weight","Egg Weight","Form","Feed","Body Weight","Egg White","Laying Rate","Laying Rate","Laying Rate")
pdf("WhiteTests.pdf",height=14,width=17,pointsize=18)
par(mfrow=c(4,2),mar=c(5,4,4,2))
par(mfrow=c(4,2))
for(i in c(2,3,5,6,7,8,9,10)){ #whites
hist(permuted[1,i,],xlim=c(min(permuted[1,i,],result[1,i]),max(permuted[1,i,],result[1,i])),main=traits[i],col="#848B9B",cex.main=2,cex.lab=2,ylab="",xlab=expression(Delta[alpha]))
abline(v=result[1,i],col="#25282E",lwd=6)
}
dev.off()
pdf("BrownTests.pdf",height=14,width=17,pointsize=18)
par(mfrow=c(4,2),mar=c(5,4,4,2))
par(mfrow=c(4,2))
for(i in c(2,3,5,6,7,8,9,10)){ #browns
hist(permuted[2,i,],xlim=c(min(permuted[2,i,],result[2,i]),max(permuted[2,i,],result[2,i])),main=traits[i],col="#848B9B",cex.main=2,cex.lab=2,ylab="",xlab=expression(Delta[alpha]))
abline(v=result[2,i],col="#25282E",lwd=6)
}
dev.off()
