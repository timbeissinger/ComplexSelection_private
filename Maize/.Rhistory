effects <- result$u
effects.mat <- as.matrix(effects)
predicted <- as.matrix(geno2[,2:ncol(geno2)]) %*% effects.mat
predicted = predicted[,1] + result$beta
plot(pheno2[,2],predicted,xlab="True phenos",ylab="Predicted phenos",main=main)
return(result$u)
}
effects.ADF<-rrblupFunction(geno,adf,wqsMap,main="ADF")
effects.NDF<-rrblupFunction(geno,ndf,wqsMap,main="NDF")
effects.IVD<-rrblupFunction(geno,ivd,wqsMap,main="IVD")
effects.CP<-rrblupFunction(geno,cp,wqsMap,main="Crude Protein")
effects.drymat<-rrblupFunction(geno,drymat,wqsMap,main="Dry matter")
effects.starch<-rrblupFunction(geno,starch,wqsMap,main="Starch")
effects.yield<-rrblupFunction(geno,yield,wqsMap,main="Yield")
adf_result <- sum(change*effects.ADF,na.rm=T)
ndf_result <- sum(change*effects.NDF,na.rm=T)
ivd_result <- sum(change*effects.IVD,na.rm=T)
cp_result <- sum(change*effects.CP,na.rm=T)
starch_result <- sum(change*effects.starch,na.rm=T)
yield_result <- sum(change*effects.yield,na.rm=T)
drymat_result <- sum(change*effects.drymat,na.rm=T)
adf_test<-c(); ndf_test<-c(); ivd_test<-c(); cp_test<-c(); starch_test<-c(); yield_test<-c(); drymat_test<-c()
for(i in 1:1000){
boot <- sample(change,length(change),replace=T)
adf_test[i]<-sum(boot*effects.ADF,na.rm=T)
ndf_test[i]<-sum(boot*effects.NDF,na.rm=T)
ivd_test[i]<-sum(boot*effects.IVD,na.rm=T)
cp_test[i]<-sum(boot*effects.CP,na.rm=T)
starch_test[i]<-sum(boot*effects.starch,na.rm=T)
yield_test[i]<-sum(boot*effects.yield,na.rm=T)
drymat_test[i]<-sum(boot*effects.drymat,na.rm=T)
}
hist(adf_test,xlim=sort(c(-1.25*adf_result,1.25*adf_result)), main="ADF test for quantitative selection")
abline(v=adf_result,col="red")
legend("topright","c(x,y)",c("Observed ADF test stat"),col="red",pch="|")
png("ADF_rrblup.png",pointsize=18, height=600, width=800)
par(mar=c(5.1,5.1,4.1,2.1))
hist(adf_test,xlim=sort(c(-1.25*adf_result,1.25*adf_result)), main="Acid Detergent Fiber",cex.main=2,cex.lab=2)
abline(v=adf_result,col="red",lwd=5)
legend("topright","c(x,y)",c("Observed ADF test stat"),col="red",pch="|")
dev.off()
hist(ndf_test,xlim=sort(c(-1.25*ndf_result,1.25*ndf_result)),main="NDF test for quantitative selection")
abline(v=ndf_result,col="red")
legend("topright","c(x,y)","Observed NDF test stat",col="red",pch="|")
hist(ivd_test,xlim=sort(c(-1.25*ivd_result,1.25*ivd_result)),main="IVD test for quantitative selection")
abline(v=ivd_result,col="red")
legend("topright","c(x,y)","Observed IVTD test stat",col="red",pch="|")
hist(cp_test,xlim=sort(c(-3*cp_result,3*cp_result)),main="CP test for quantitative selection")
abline(v=cp_result,col="red")
legend("topright","c(x,y)","Observed CP test stat",col="red",pch="|")
hist(starch_test,xlim=sort(c(-1.25*starch_result,1.25*starch_result)),main="Starch test for quantitative selection")
abline(v=starch_result,col="red")
legend("topright","c(x,y)","Observed starch test stat",col="red",pch="|")
hist(yield_test,xlim=sort(c(-1.25*yield_result,1.25*yield_result)),main="Yield test for quantitative selection")
abline(v=yield_result,col="red")
legend("topright","c(x,y)","Observed yield test stat",col="red",pch="|")
hist(drymat_test,xlim=sort(c(-8*drymat_result,8*drymat_result)),main="Dry matter test for quantitative selection")
abline(v=drymat_result,col="red")
legend("topright","c(x,y)","Observed dry matter test stat",col="red",pch="|")
cor.test(change,effects.ADF,na.rm=T)
cor.test(change,effects.NDF,na.rm=T)
cor.test(change,effects.IVD,na.rm=T)
cor.test(change,effects.CP,na.rm=T)
cor.test(change,effects.starch,na.rm=T)
cor.test(change,effects.yield,na.rm=T)
cor.test(change,effects.drymat,na.rm=T)
adf_test<-c(); ndf_test<-c(); ivd_test<-c(); cp_test<-c(); starch_test<-c(); yield_test<-c(); drymat_test<-c()
for(i in 1:10000){
boot <- sample(change,length(change),replace=T)
adf_test[i]<-sum(boot*effects.ADF,na.rm=T)
ndf_test[i]<-sum(boot*effects.NDF,na.rm=T)
ivd_test[i]<-sum(boot*effects.IVD,na.rm=T)
cp_test[i]<-sum(boot*effects.CP,na.rm=T)
starch_test[i]<-sum(boot*effects.starch,na.rm=T)
yield_test[i]<-sum(boot*effects.yield,na.rm=T)
drymat_test[i]<-sum(boot*effects.drymat,na.rm=T)
}
hist(adf_test,xlim=sort(c(-1.25*adf_result,1.25*adf_result)), main="ADF test for quantitative selection")
abline(v=adf_result,col="red")
legend("topright","c(x,y)",c("Observed ADF test stat"),col="red",pch="|")
hist(ndf_test,xlim=sort(c(-1.25*ndf_result,1.25*ndf_result)),main="NDF test for quantitative selection")
abline(v=ndf_result,col="red")
legend("topright","c(x,y)","Observed NDF test stat",col="red",pch="|")
hist(ndf_test,xlim=sort(c(-1.25*ndf_result,1.25*ndf_result)),main="NDF test for quantitative selection")
abline(v=ndf_result,col="red")
legend("topright","c(x,y)","Observed NDF test stat",col="red",pch="|")
hist(ivd_test,xlim=sort(c(-1.25*ivd_result,1.25*ivd_result)),main="IVD test for quantitative selection")
abline(v=ivd_result,col="red")
legend("topright","c(x,y)","Observed IVTD test stat",col="red",pch="|")
hist(cp_test,xlim=sort(c(-3*cp_result,3*cp_result)),main="CP test for quantitative selection")
abline(v=cp_result,col="red")
legend("topright","c(x,y)","Observed CP test stat",col="red",pch="|")
hist(starch_test,xlim=sort(c(-1.25*starch_result,1.25*starch_result)),main="Starch test for quantitative selection")
abline(v=starch_result,col="red")
legend("topright","c(x,y)","Observed starch test stat",col="red",pch="|")
hist(yield_test,xlim=sort(c(-1.25*yield_result,1.25*yield_result)),main="Yield test for quantitative selection")
abline(v=yield_result,col="red")
legend("topright","c(x,y)","Observed yield test stat",col="red",pch="|")
plot(cumulative$yield,col=wqsMap$Chromosome, main="Cumulative yield freq*eff",xlab="Chromosome",xaxt="n",ylim=c(-4e-06,4e-06))
axis(1,c(-10000,700,2000,3300,4300,5300,6300,7000,8000,8700,9700,100000),lab=c(NA,1:10,NA))
abline(h=quantile(yield_test,c(0.025,0.975)),col="red")
legend("topright","c(x,y)","Significance thresholds",col="red",pch="=")
plot(cumulative$yield,col=wqsMap$Chromosome, main="Cumulative yield freq*eff",xlab="Chromosome",xaxt="n",ylim=c(-4e-06,4e-06))
axis(1,c(-10000,700,2000,3300,4300,5300,6300,7000,8000,8700,9700,100000),lab=c(NA,1:10,NA))
plot(effects.ADF,change)
plot(effects.yield,change)
plot(effects.ADF,change)
plot(effects.yield,change)
plot(effects.ADF,change)
plot(effects.yield,change)
cor(effects.yield, change)
cor(effects.drymat, change)
plot(effects.drymat,change)
?mixed.solve
str(pheno3)
cycle
yr
str(yr)
str(geno2)
nrow(geno2)
nrow(yr)
yr
result <- mixed.solve(pheno2[,2], Z= as.matrix(geno2[,2:ncol(geno2)]), X=yr, K=NULL, SE=F, return.Hinv=FALSE,method="ML") #don't use cycle as a covariate!
yr
as.factor(yr)
result <- mixed.solve(pheno2[,2], Z= as.matrix(geno2[,2:ncol(geno2)]), X=as.factor(yr), K=NULL, SE=F, return.Hinv=FALSE,method="ML") #don't use cycle as a covariate!
as.vector(as.factor(yr))
as.numeric(as.factor(yr))
as.numeric(yr)
result <- mixed.solve(pheno2[,2], Z= as.matrix(geno2[,2:ncol(geno2)]), X=as.numeric(as.factor(yr)), K=NULL, SE=F, return.Hinv=FALSE,method="ML") #don't use cycle as a covariate!
result
library(rrBLUP)
rrblupFunction <- function(geno, pheno, map,main){
##drop "_CX" from rownames in geno
names(geno)[1] <- "Taxa"
geno$Taxa <- gsub('...$', '', wqsGeno$Taxa)
##remove inds without geno & pheno
ndx <- match(geno[, 1], pheno[, 1])
noPheno <- geno[, 1][which(is.na(ndx))]
geno2 <- geno[-which(is.na(ndx)), ]
ndx2 <- ndx[-which(is.na(ndx))]
pheno2 <- pheno[ndx2, ]
##Calculate numbers for each cycle
cycleIndNum <- vector(length=5)
cycleIndNum[1] <- length(which(pheno2$Cycle=='C0'))
cycleIndNum[2] <- length(which(pheno2$Cycle=='C1'))
cycleIndNum[3] <- length(which(pheno2$Cycle=='C2'))
cycleIndNum[4] <- length(which(pheno2$Cycle=='C3'))
cycleIndNum[5] <- length(which(pheno2$Cycle=='C4'))
yr <- as.character(pheno2$Cycle)
pheno2 <- pheno2[, c(1, 2)]
##Remove individuals with missing phenoypte (these rows were in phenotype file as NA)
pheno3<-pheno2[which(is.na(pheno2[,2])==F),]
geno3<-geno2[which(is.na(pheno2[,2])==F),]
print(paste("In total", nrow(geno3), "individuals."))
#run rrBLUP
result <- mixed.solve(pheno2[,2], Z= as.matrix(geno2[,2:ncol(geno2)]), X=as.numeric(as.factor(yr)), K=NULL, SE=F, return.Hinv=FALSE,method="ML") # cycle INCLUDED as a covariate!
#result <- mixed.solve(pheno2[,2], Z= as.matrix(geno2[,2:ncol(geno2)]),   K=NULL, SE=F, return.Hinv=FALSE,method="ML") # cycle NOT included as a covariate!
##Plot predicted vs actual
effects <- result$u
effects.mat <- as.matrix(effects)
predicted <- as.matrix(geno2[,2:ncol(geno2)]) %*% effects.mat
predicted = predicted[,1] + result$beta
plot(pheno2[,2],predicted,xlab="True phenos",ylab="Predicted phenos",main=main)
return(result$u)
}
effects.ADF<-rrblupFunction(geno,adf,wqsMap,main="ADF")
effects.NDF<-rrblupFunction(geno,ndf,wqsMap,main="NDF")
effects.IVD<-rrblupFunction(geno,ivd,wqsMap,main="IVD")
effects.CP<-rrblupFunction(geno,cp,wqsMap,main="Crude Protein")
effects.drymat<-rrblupFunction(geno,drymat,wqsMap,main="Dry matter")
effects.starch<-rrblupFunction(geno,starch,wqsMap,main="Starch")
effects.yield<-rrblupFunction(geno,yield,wqsMap,main="Yield")
?kin.blup
str(pheno2)
str(geno2)
data <- cbind(pheno2, yr, geno2[,2:ncol(geno2)])
str(data)
?A.mat
dim(geno2)
A.matrix <-A.mat(X=geno2,impute="EM")
A.matrix <-A.mat(X=geno2[,2:nrow(geno2)],impute="EM")
A.matrix
fix(A.matrix)
dim(A.matrix)
geno2[,1]
rownames(A.matrix) = geno2[,1]
fix(geno2)
fix(A.matrix)
?kin.blup
data <- cbind(pheno2, yr)
data
yr
data <- cbind(pheno2, as.factor(yr)
yr <- as.factor(yr)
A.matrix <-A.mat(X=geno2[,2:nrow(geno2)],impute="EM")#make the A matrix
rownames(A.matrix) = geno2[,1]
yr <- as.factor(yr)
data <- cbind(pheno2, yr)
str(data)
result <- kin.blup(data=pheno2, geno="ENTRY",pheno="Intercept.BLUP",fixed="yr")
result <- kin.blup(data=data, geno="ENTRY",pheno="Intercept.BLUP",fixed="yr")
result
effects <- result$u
effects.mat <- as.matrix(effects)
effects
?mixed.solve
design.matrix(yr)
design(yr)
model.matrix(yr)
yr
model.matrix(pheno2~yr)
pheno2
model.matrix(pheno2[,2]~yr)
result <- mixed.solve(pheno2[,2], Z= as.matrix(geno2[,2:ncol(geno2)]), X = model.matrix(pheno2[,2]~yr),   K=NULL, SE=F, return.Hinv=FALSE,method="ML") # cycle INCLUDED as a covariate!
result <- mixed.solve(pheno2[,2], Z= as.matrix(geno2[,2:ncol(geno2)]),X= model.matrix(pheno2[,2]~yr),   K=NULL, SE=F, return.Hinv=FALSE,method="ML") # cycle INCLUDED as a covariate!
model.matrix(pheno2[,2]~yr)
result <- mixed.solve(pheno2[,2], Z= as.matrix(geno2[,2:ncol(geno2)]),   K=NULL, SE=F, return.Hinv=FALSE,method="ML") # cycle NOT included as a covariate!
result <- mixed.solve(pheno2[,2], Z= as.matrix(geno2[,2:ncol(geno2)]),X= model.matrix(pheno2[,2]~yr),   K=NULL, SE=F, return.Hinv=FALSE,method="ML") # cycle INCLUDED as a covariate!
model.matrix(pheno2[,2]~yr)
fixedMat <- model.matrix(pheno2[,2]~yr)
nrow(fixedMat)
yr
length(yr)
length(pheno2)
nrow(pheno2)
?model.matrix
result <- mixed.solve(pheno3[,2], Z= as.matrix(geno3[,2:ncol(geno3)]),X= model.matrix(pheno2[,2]~yr),   K=NULL, SE=F, return.Hinv=FALSE,method="ML") # cycle INCLUDED as a covariate!
effects <- result$u
effects.mat <- as.matrix(effects)
predicted <- as.matrix(geno2[,2:ncol(geno2)]) %*% effects.mat
predicted = predicted[,1] + result$beta
plot(pheno2[,2],predicted,xlab="True phenos",ylab="Predicted phenos",main=main)
return(result$u)
}
result <- mixed.solve(pheno2[,2], Z= as.matrix(geno2[,2:ncol(geno2)]),   K=NULL, SE=F, return.Hinv=FALSE,method="ML") # cycle NOT included as a covariate!
effects <- result$u
effects.mat <- as.matrix(effects)
predicted <- as.matrix(geno2[,2:ncol(geno2)]) %*% effects.mat
predicted = predicted[,1] + result$beta
plot(pheno2[,2],predicted,xlab="True phenos",ylab="Predicted phenos",main=main)
yr <- as.factor(yr)
library(rrBLUP)
rrblupFunction <- function(geno, pheno, map,main){
##drop "_CX" from rownames in geno
names(geno)[1] <- "Taxa"
geno$Taxa <- gsub('...$', '', wqsGeno$Taxa)
##remove inds without geno & pheno
ndx <- match(geno[, 1], pheno[, 1])
noPheno <- geno[, 1][which(is.na(ndx))]
geno2 <- geno[-which(is.na(ndx)), ]
ndx2 <- ndx[-which(is.na(ndx))]
pheno2 <- pheno[ndx2, ]
##Calculate numbers for each cycle
cycleIndNum <- vector(length=5)
cycleIndNum[1] <- length(which(pheno2$Cycle=='C0'))
cycleIndNum[2] <- length(which(pheno2$Cycle=='C1'))
cycleIndNum[3] <- length(which(pheno2$Cycle=='C2'))
cycleIndNum[4] <- length(which(pheno2$Cycle=='C3'))
cycleIndNum[5] <- length(which(pheno2$Cycle=='C4'))
yr <- as.character(pheno2$Cycle)
yr <- as.factor(yr)
pheno2 <- pheno2[, c(1, 2)]
##Remove individuals with missing phenoypte (these rows were in phenotype file as NA)
pheno3<-pheno2[which(is.na(pheno2[,2])==F),]
geno3<-geno2[which(is.na(pheno2[,2])==F),]
print(paste("In total", nrow(geno3), "individuals."))
#run rrBLUP
#result <- mixed.solve(pheno2[,2], Z= as.matrix(geno2[,2:ncol(geno2)]),   K=NULL, SE=F, return.Hinv=FALSE,method="ML") # cycle NOT included as a covariate!
#below is code to include cycle as a covariate
fixedMat <- model.matrix(pheno2[,2]~yr) #model matrix for years
result <- mixed.solve(pheno3[,2], Z= as.matrix(geno3[,2:ncol(geno3)]),X= model.matrix(pheno2[,2]~yr),   K=NULL, SE=F, return.Hinv=FALSE,method="ML") # cycle INCLUDED as a covariate!
##Plot predicted vs actual
effects <- result$u
effects.mat <- as.matrix(effects)
predicted <- as.matrix(geno2[,2:ncol(geno2)]) %*% effects.mat
predicted = predicted[,1] + result$beta
plot(pheno2[,2],predicted,xlab="True phenos",ylab="Predicted phenos",main=main)
return(result$u)
}
effects.ADF<-rrblupFunction(geno,adf,wqsMap,main="ADF")
geno<-geno
pheno<-adf
map<-wqsMAP
map<-wqsMap
main="ADF"
geno<-wqsGeno
geno[,2:nrow(geno)] <- 1-geno[,2:nrow(geno)]
names(geno)[1] <- "Taxa"
geno$Taxa <- gsub('...$', '', wqsGeno$Taxa)
##remove inds without geno & pheno
ndx <- match(geno[, 1], pheno[, 1])
noPheno <- geno[, 1][which(is.na(ndx))]
geno2 <- geno[-which(is.na(ndx)), ]
ndx2 <- ndx[-which(is.na(ndx))]
pheno2 <- pheno[ndx2, ]
##Calculate numbers for each cycle
cycleIndNum <- vector(length=5)
cycleIndNum[1] <- length(which(pheno2$Cycle=='C0'))
cycleIndNum[2] <- length(which(pheno2$Cycle=='C1'))
cycleIndNum[3] <- length(which(pheno2$Cycle=='C2'))
cycleIndNum[4] <- length(which(pheno2$Cycle=='C3'))
cycleIndNum[5] <- length(which(pheno2$Cycle=='C4'))
yr <- as.character(pheno2$Cycle)
yr <- as.factor(yr)
pheno2 <- pheno2[, c(1, 2)]
##Remove individuals with missing phenoypte (these rows were in phenotype file as NA)
pheno3<-pheno2[which(is.na(pheno2[,2])==F),]
geno3<-geno2[which(is.na(pheno2[,2])==F),]
print(paste("In total", nrow(geno3), "individuals."))
#run rrBLUP
#result <- mixed.solve(pheno2[,2], Z= as.matrix(geno2[,2:ncol(geno2)]),   K=NULL, SE=F, return.Hinv=FALSE,method="ML") # cycle NOT included as a covariate!
#below is code to include cycle as a covariate
fixedMat <- model.matrix(pheno2[,2]~yr) #model matrix for years
result <- mixed.solve(pheno3[,2], Z= as.matrix(geno3[,2:ncol(geno3)]),X= model.matrix(pheno2[,2]~yr),   K=NULL, SE=F, return.Hinv=FALSE,method="ML") # cycle INCLUDED as a covariate!
##Plot predicted vs actual
effects <- result$u
effects.mat <- as.matrix(effects)
predicted <- as.matrix(geno2[,2:ncol(geno2)]) %*% effects.mat
predicted = predicted[,1] + result$beta
ncol(geno2)
ncol(geno3)
effects.mat
dim(effects.mat)
result <- mixed.solve(pheno2[,2], Z= as.matrix(geno2[,2:ncol(geno2)]),   K=NULL, SE=F, return.Hinv=FALSE,method="ML") # cycle NOT included as a covariate!
effects <- result$u
effects.mat <- as.matrix(effects)
predicted <- as.matrix(geno2[,2:ncol(geno2)]) %*% effects.mat
predicted = predicted[,1] + result$beta
plot(pheno2[,2],predicted,xlab="True phenos",ylab="Predicted phenos",main=main)
fixedMat <- model.matrix(pheno2[,2]~yr) #model matrix for years
result <- mixed.solve(pheno3[,2], Z= as.matrix(geno3[,2:ncol(geno3)]),X= model.matrix(pheno2[,2]~yr),   K=NULL, SE=F, return.Hinv=FALSE,method="ML") # cycle INCLUDED as a covariate!
##Plot predicted vs actual
effects <- result$u
effects
effects.mat <- as.matrix(effects)
effects.mat
str(effects.mat)
effects <- result$u
str(effects)
effects.mat <- as.matrix(effects)
predicted <- as.matrix(geno2[,2:ncol(geno2)]) %*% effects.mat
predicted = predicted[,1] + result$beta
results$beta
result$beta
result <- mixed.solve(pheno2[,2], Z= as.matrix(geno2[,2:ncol(geno2)]),   K=NULL, SE=F, return.Hinv=FALSE,method="ML") # cycle NOT included as a covariate!
result$beta
predicted = predicted[,1] + result$beta[1]
plot(pheno2[,2],predicted,xlab="True phenos",ylab="Predicted phenos",main=main)
return(result$u)
library(rrBLUP)
rrblupFunction <- function(geno, pheno, map,main){
##drop "_CX" from rownames in geno
names(geno)[1] <- "Taxa"
geno$Taxa <- gsub('...$', '', wqsGeno$Taxa)
##remove inds without geno & pheno
ndx <- match(geno[, 1], pheno[, 1])
noPheno <- geno[, 1][which(is.na(ndx))]
geno2 <- geno[-which(is.na(ndx)), ]
ndx2 <- ndx[-which(is.na(ndx))]
pheno2 <- pheno[ndx2, ]
##Calculate numbers for each cycle
cycleIndNum <- vector(length=5)
cycleIndNum[1] <- length(which(pheno2$Cycle=='C0'))
cycleIndNum[2] <- length(which(pheno2$Cycle=='C1'))
cycleIndNum[3] <- length(which(pheno2$Cycle=='C2'))
cycleIndNum[4] <- length(which(pheno2$Cycle=='C3'))
cycleIndNum[5] <- length(which(pheno2$Cycle=='C4'))
yr <- as.character(pheno2$Cycle)
yr <- as.factor(yr)
pheno2 <- pheno2[, c(1, 2)]
##Remove individuals with missing phenoypte (these rows were in phenotype file as NA)
pheno3<-pheno2[which(is.na(pheno2[,2])==F),]
geno3<-geno2[which(is.na(pheno2[,2])==F),]
print(paste("In total", nrow(geno3), "individuals."))
#run rrBLUP
#result <- mixed.solve(pheno2[,2], Z= as.matrix(geno2[,2:ncol(geno2)]),   K=NULL, SE=F, return.Hinv=FALSE,method="ML") # cycle NOT included as a covariate!
#below is code to include cycle as a covariate
fixedMat <- model.matrix(pheno2[,2]~yr) #model matrix for years
result <- mixed.solve(pheno3[,2], Z= as.matrix(geno3[,2:ncol(geno3)]),X= model.matrix(pheno2[,2]~yr),   K=NULL, SE=F, return.Hinv=FALSE,method="ML") # cycle INCLUDED as a covariate!
##Plot predicted vs actual
effects <- result$u
effects.mat <- as.matrix(effects)
predicted <- as.matrix(geno2[,2:ncol(geno2)]) %*% effects.mat
predicted = predicted[,1] + result$beta[1]
plot(pheno2[,2],predicted,xlab="True phenos",ylab="Predicted phenos",main=main)
return(result$u)
}
effects.ADF<-rrblupFunction(geno,adf,wqsMap,main="ADF")
effects.NDF<-rrblupFunction(geno,ndf,wqsMap,main="NDF")
effects.IVD<-rrblupFunction(geno,ivd,wqsMap,main="IVD")
effects.CP<-rrblupFunction(geno,cp,wqsMap,main="Crude Protein")
effects.drymat<-rrblupFunction(geno,drymat,wqsMap,main="Dry matter")
effects.starch<-rrblupFunction(geno,starch,wqsMap,main="Starch")
effects.yield<-rrblupFunction(geno,yield,wqsMap,main="Yield")
adf_result <- sum(change*effects.ADF,na.rm=T)
ndf_result <- sum(change*effects.NDF,na.rm=T)
ivd_result <- sum(change*effects.IVD,na.rm=T)
cp_result <- sum(change*effects.CP,na.rm=T)
starch_result <- sum(change*effects.starch,na.rm=T)
yield_result <- sum(change*effects.yield,na.rm=T)
drymat_result <- sum(change*effects.drymat,na.rm=T)
adf_test<-c(); ndf_test<-c(); ivd_test<-c(); cp_test<-c(); starch_test<-c(); yield_test<-c(); drymat_test<-c()
for(i in 1:10000){
boot <- sample(change,length(change),replace=T)
adf_test[i]<-sum(boot*effects.ADF,na.rm=T)
ndf_test[i]<-sum(boot*effects.NDF,na.rm=T)
ivd_test[i]<-sum(boot*effects.IVD,na.rm=T)
cp_test[i]<-sum(boot*effects.CP,na.rm=T)
starch_test[i]<-sum(boot*effects.starch,na.rm=T)
yield_test[i]<-sum(boot*effects.yield,na.rm=T)
drymat_test[i]<-sum(boot*effects.drymat,na.rm=T)
}
hist(adf_test,xlim=sort(c(-1.25*adf_result,1.25*adf_result)), main="ADF test for quantitative selection")
abline(v=adf_result,col="red")
legend("topright","c(x,y)",c("Observed ADF test stat"),col="red",pch="|")
hist(ndf_test,xlim=sort(c(-1.25*ndf_result,1.25*ndf_result)),main="NDF test for quantitative selection")
abline(v=ndf_result,col="red")
legend("topright","c(x,y)","Observed NDF test stat",col="red",pch="|")
hist(ivd_test,xlim=sort(c(-1.25*ivd_result,1.25*ivd_result)),main="IVD test for quantitative selection")
abline(v=ivd_result,col="red")
legend("topright","c(x,y)","Observed IVTD test stat",col="red",pch="|")
hist(cp_test,xlim=sort(c(-3*cp_result,3*cp_result)),main="CP test for quantitative selection")
abline(v=cp_result,col="red")
legend("topright","c(x,y)","Observed CP test stat",col="red",pch="|")
hist(starch_test,xlim=sort(c(-1.25*starch_result,1.25*starch_result)),main="Starch test for quantitative selection")
abline(v=starch_result,col="red")
legend("topright","c(x,y)","Observed starch test stat",col="red",pch="|")
hist(yield_test,xlim=sort(c(-1.25*yield_result,1.25*yield_result)),main="Yield test for quantitative selection")
abline(v=yield_result,col="red")
legend("topright","c(x,y)","Observed yield test stat",col="red",pch="|")
hist(drymat_test,xlim=sort(c(-8*drymat_result,8*drymat_result)),main="Dry matter test for quantitative selection")
abline(v=drymat_result,col="red")
legend("topright","c(x,y)","Observed dry matter test stat",col="red",pch="|")
effects.ADF<-rrblupFunction(geno,adf,wqsMap,main="ADF")
effects.NDF<-rrblupFunction(geno,ndf,wqsMap,main="NDF")
effects.IVD<-rrblupFunction(geno,ivd,wqsMap,main="IVD")
effects.CP<-rrblupFunction(geno,cp,wqsMap,main="Crude Protein")
effects.drymat<-rrblupFunction(geno,drymat,wqsMap,main="Dry matter")
effects.starch<-rrblupFunction(geno,starch,wqsMap,main="Starch")
effects.yield<-rrblupFunction(geno,yield,wqsMap,main="Yield")
adf_result <- sum(change*effects.ADF,na.rm=T)
ndf_result <- sum(change*effects.NDF,na.rm=T)
ivd_result <- sum(change*effects.IVD,na.rm=T)
cp_result <- sum(change*effects.CP,na.rm=T)
starch_result <- sum(change*effects.starch,na.rm=T)
yield_result <- sum(change*effects.yield,na.rm=T)
drymat_result <- sum(change*effects.drymat,na.rm=T)
adf_test<-c(); ndf_test<-c(); ivd_test<-c(); cp_test<-c(); starch_test<-c(); yield_test<-c(); drymat_test<-c()
for(i in 1:10000){
boot <- sample(change,length(change),replace=T)
adf_test[i]<-sum(boot*effects.ADF,na.rm=T)
ndf_test[i]<-sum(boot*effects.NDF,na.rm=T)
ivd_test[i]<-sum(boot*effects.IVD,na.rm=T)
cp_test[i]<-sum(boot*effects.CP,na.rm=T)
starch_test[i]<-sum(boot*effects.starch,na.rm=T)
yield_test[i]<-sum(boot*effects.yield,na.rm=T)
drymat_test[i]<-sum(boot*effects.drymat,na.rm=T)
}
hist(adf_test,xlim=sort(c(-1.25*adf_result,1.25*adf_result)), main="ADF test for quantitative selection")
abline(v=adf_result,col="red")
legend("topright","c(x,y)",c("Observed ADF test stat"),col="red",pch="|")
hist(adf_test,xlim=sort(c(-1.15*adf_result,1*adf_result)), main="ADF test for quantitative selection")
abline(v=adf_result,col="red")
hist(adf_test,xlim=sort(c(-1.2*adf_result,1*adf_result)), main="ADF test for quantitative selection")
abline(v=adf_result,col="red")
legend("topright","c(x,y)",c("Observed ADF test stat"),col="red",pch="|")
hist(adf_test,xlim=sort(c(-1.25*adf_result,1*adf_result)), main="ADF test for quantitative selection")
abline(v=adf_result,col="red")
legend("topright","c(x,y)",c("Observed ADF test stat"),col="red",pch="|")
hist(adf_test,xlim=sort(c(-1.25*adf_result,1*adf_result)), main="Acid Detergent Fiber",cex.main=2,cex.lab=2)
png("ADF_rrblmodel.matrix(pheno2[,2]~yr)up.png",pointsize=18, height=600, width=800)
par(mar=c(5.1,5.1,4.1,2.1))
hist(adf_test,xlim=sort(c(-1.25*adf_result,1*adf_result)), main="Acid Detergent Fiber",cex.main=2,cex.lab=2)
abline(v=adf_result,col="red",lwd=5)
legend("topright","c(x,y)",c("Observed ADF test stat"),col="red",pch="|")
dev.off()
hist(ndf_test,xlim=sort(c(-1.25*ndf_result,1.25*ndf_result)),main="NDF test for quantitative selection")
abline(v=ndf_result,col="red")
legend("topright","c(x,y)","Observed NDF test stat",col="red",pch="|")
hist(ndf_test,xlim=sort(c(-1.2*ndf_result,1.2*ndf_result)),main="NDF test for quantitative selection")
abline(v=ndf_result,col="red")
legend("topright","c(x,y)","Observed NDF test stat",col="red",pch="|")
hist(ivd_test,xlim=sort(c(-1.25*ivd_result,1.25*ivd_result)),main="IVD test for quantitative selection")
abline(v=ivd_result,col="red")
legend("topright","c(x,y)","Observed IVTD test stat",col="red",pch="|")
hist(ivd_test,xlim=sort(c(-1*ivd_result,1.25*ivd_result)),main="IVD test for quantitative selection")
abline(v=ivd_result,col="red")
legend("topright","c(x,y)","Observed IVTD test stat",col="red",pch="|")
hist(cp_test,xlim=sort(c(-3*cp_result,3*cp_result)),main="CP test for quantitative selection")
abline(v=cp_result,col="red")
legend("topright","c(x,y)","Observed CP test stat",col="red",pch="|")
hist(cp_test,xlim=sort(c(-2*cp_result,2*cp_result)),main="CP test for quantitative selection")
abline(v=cp_result,col="red")
legend("topright","c(x,y)","Observed CP test stat",col="red",pch="|")
par(mar=c(5.1,5.1,4.1,2.1))
hist(cp_test,xlim=sort(c(-2*cp_result,2*cp_result)),main="Crude Protein",cex.main=2,cex.lab=2)
abline(v=cp_result,col="red",lwd=5)
hist(yield_test,xlim=sort(c(-1.25*yield_result,1.25*yield_result)),main="Yield test for quantitative selection")
abline(v=yield_result,col="red")
legend("topright","c(x,y)","Observed yield test stat",col="red",pch="|")
hist(yield_test,xlim=sort(c(-1*yield_result,1.25*yield_result)),main="Yield test for quantitative selection")
abline(v=yield_result,col="red")
legend("topright","c(x,y)","Observed yield test stat",col="red",pch="|")
hist(drymat_test,xlim=sort(c(-8*drymat_result,8*drymat_result)),main="Dry matter test for quantitative selection")
abline(v=drymat_result,col="red")
legend("topright","c(x,y)","Observed dry matter test stat",col="red",pch="|")
hist(drymat_test,xlim=sort(c(-5*drymat_result,5*drymat_result)),main="Dry matter test for quantitative selection")
abline(v=drymat_result,col="red")
legend("topright","c(x,y)","Observed dry matter test stat",col="red",pch="|")
1:100
0.5:99.5
